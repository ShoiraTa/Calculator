{"version":3,"sources":["logic/operate.js","componets/CalculatorUI.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","useState","total","next","state","setState","handleClick","e","obj","buttonName","target","innerText","match","includes","parseFloat","className","type","onClick","App","CalculatorUI","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b90d1863.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable no-useless-constructor */\n\nimport './calculatorUI.css';\nimport React, { useState } from 'react';\nimport calculate from '../logic/calculate';\n\nconst Calculator = () => {\n  const [state, setState] = useState({ total: '0', next: null, operation: null });\n\n  const handleClick = (e) => {\n    setState(calculate(state, e.target.innerText));\n  };\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calculator-container\">\n        <div className=\"result\">\n          {state.total}\n          {state.operation}\n          {state.next}\n        </div>\n        <div className=\"calculator-oprtaitions\">\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">AC</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">%</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">+/-</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-orange single-cell\">&divide;</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">7</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">8</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">9</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-orange single-cell\">x</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell \">4</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">5</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">6</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-orange single-cell\">-</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">1</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">2</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">3</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-orange single-cell\">+</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray zero single-cell\">0</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-gray single-cell\">.</button>\n          <button type=\"button\" onClick={handleClick} className=\"bg-orange single-cell\">=</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport CalculatorUI from './componets/CalculatorUI';\n\nconst App = () => <CalculatorUI />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}